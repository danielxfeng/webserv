#include <gtest/gtest.h>
#include "../../includes/HttpRequests.hpp"
#include "../../includes/WebServErr.hpp"

TEST(HTTPReqhttpParser, getservername) {


    std::vector<char> request = {
		'G','E','T',' ','/','f','i','l','e','.','t','x','t',' ','H','T','T','P','/','1','.','0','\r','\n',
		'H','o','s','t',':',' ','l','o','c','a','l','h','o','s','t',':','8','0','8','0','\r','\n',
		'C','o','n','n','e','c','t','i','o','n',':',' ','k','e','e','p','-','a','l','i','v','e','\r','\n',
		'U','s','e','r','-','A','g','e','n','t',':',' ','M','o','z','i','l','l','a','/','5','.','0',' ',
		'(','W','i','n','d','o','w','s',' ','N','T',' ','1','0','.','0',';',' ','W','i','n','6','4',';',' ',
		'x','6','4',')',' ','A','p','p','l','e','W','e','b','K','i','t','/','5','3','7','.','3','6',' ',
		'(','K','H','T','M','L',',',' ','l','i','k','e',' ','G','e','c','k','o',')',' ','C','h','r','o','m','e',
		'/','1','1','5','.','0','.','0','.','0',' ','S','a','f','a','r','i','/','5','3','7','.','3','6','\r','\n',
		'A','c','c','e','p','t',':',' ','t','e','x','t','/','h','t','m','l',',','a','p','p','l','i','c','a','t','i','o','n','/',
		'x','h','t','m','l','+','x','m','l',',','a','p','p','l','i','c','a','t','i','o','n','/','x','m','l',';','q','=','0','.','9',',',
		'i','m','a','g','e','/','w','e','b','p',',','*','/','*',';','q','=','0','.','8','\r','\n',
		'A','c','c','e','p','t','-','E','n','c','o','d','i','n','g',':',' ','g','z','i','p',',',' ','d','e','f','l','a','t','e','\r','\n',
		'A','c','c','e','p','t','-','L','a','n','g','u','a','g','e',':',' ','e','n','-','U','S',',','e','n',';','q','=','0','.','9','\r','\n',
		'\r','\n','{','t','e','s','t','}'
	};


HttpRequests parser;
parser.httpParser(request);

std::string ServerName = parser.getrequestServerName();

EXPECT_EQ(ServerName, "localhost");
}


TEST(HTTPrequesttest, returnedmaps) {


    std::vector<char> request = {
		'G','E','T',' ','/','f','i','l','e','.','t','x','t',' ','H','T','T','P','/','1','.','1','\r','\n',
		'H','o','s','t',':',' ','l','o','c','a','l','h','o','s','t',':','8','0','8','0','\r','\n',
		'C','o','n','n','e','c','t','i','o','n',':',' ','k','e','e','p','-','a','l','i','v','e','\r','\n',
		'U','s','e','r','-','A','g','e','n','t',':',' ','M','o','z','i','l','l','a','/','5','.','0',' ',
		'(','W','i','n','d','o','w','s',' ','N','T',' ','1','0','.','0',';',' ','W','i','n','6','4',';',' ',
		'x','6','4',')',' ','A','p','p','l','e','W','e','b','K','i','t','/','5','3','7','.','3','6',' ',
		'(','K','H','T','M','L',',',' ','l','i','k','e',' ','G','e','c','k','o',')',' ','C','h','r','o','m','e',
		'/','1','1','5','.','0','.','0','.','0',' ','S','a','f','a','r','i','/','5','3','7','.','3','6','\r','\n',
		'A','c','c','e','p','t',':',' ','t','e','x','t','/','h','t','m','l',',','a','p','p','l','i','c','a','t','i','o','n','/',
		'x','h','t','m','l','+','x','m','l',',','a','p','p','l','i','c','a','t','i','o','n','/','x','m','l',';','q','=','0','.','9',',',
		'i','m','a','g','e','/','w','e','b','p',',','*','/','*',';','q','=','0','.','8','\r','\n',
		'A','c','c','e','p','t','-','E','n','c','o','d','i','n','g',':',' ','g','z','i','p',',',' ','d','e','f','l','a','t','e','\r','\n',
		'A','c','c','e','p','t','-','L','a','n','g','u','a','g','e',':',' ','e','n','-','U','S',',','e','n',';','q','=','0','.','9','\r','\n',
		'\r','\n','{','t','e','s','t','}'
	};


HttpRequests parser;
parser.httpParser(request);

std::unordered_map<std::string, std::string> requestMap = parser.getrequestMap();
std::unordered_map<std::string, std::string> requestBody = parser.getrequestMap();

EXPECT_EQ(requestMap["HttpVersion"], "HTTP/1.1");
EXPECT_EQ(requestMap["Method"], "GET");
EXPECT_EQ(requestMap["Target"], "/file.txt");

EXPECT_EQ(requestBody["host"], "localhost:8080");
EXPECT_EQ(requestBody["connection"], "keep-alive");

}

TEST(HttpHeaderTester, missed_entry) {


    std::vector<char> request = {
		'G','E','T',' ','H','T','T','P','/','1','.','1','\r','\n',
		'H','o','s','t',':',' ','l','o','c','a','l','h','o','s','t',':','8','0','8','0','\r','\n',
		'C','o','n','n','e','c','t','i','o','n',':',' ','k','e','e','p','-','a','l','i','v','e','\r','\n',
		'U','s','e','r','-','A','g','e','n','t',':',' ','M','o','z','i','l','l','a','/','5','.','0',' ',
		'(','W','i','n','d','o','w','s',' ','N','T',' ','1','0','.','0',';',' ','W','i','n','6','4',';',' ',
		'x','6','4',')',' ','A','p','p','l','e','W','e','b','K','i','t','/','5','3','7','.','3','6',' ',
		'(','K','H','T','M','L',',',' ','l','i','k','e',' ','G','e','c','k','o',')',' ','C','h','r','o','m','e',
		'/','1','1','5','.','0','.','0','.','0',' ','S','a','f','a','r','i','/','5','3','7','.','3','6','\r','\n',
		'A','c','c','e','p','t',':',' ','t','e','x','t','/','h','t','m','l',',','a','p','p','l','i','c','a','t','i','o','n','/',
		'x','h','t','m','l','+','x','m','l',',','a','p','p','l','i','c','a','t','i','o','n','/','x','m','l',';','q','=','0','.','9',',',
		'i','m','a','g','e','/','w','e','b','p',',','*','/','*',';','q','=','0','.','8','\r','\n',
		'A','c','c','e','p','t','-','E','n','c','o','d','i','n','g',':',' ','g','z','i','p',',',' ','d','e','f','l','a','t','e','\r','\n',
		'A','c','c','e','p','t','-','L','a','n','g','u','a','g','e',':',' ','e','n','-','U','S',',','e','n',';','q','=','0','.','9','\r','\n',
		'\r','\n','{','t','e','s','t','}'
	};


HttpRequests parser;
EXPECT_THROW(parser.httpParser(request), WebServErr::BadRequestException);

}


